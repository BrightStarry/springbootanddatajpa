加了个解析csv的小demo.递归排列


2017年4月2日 22:17:06
    开始弄springboot，本来已经弄了一个项目的。结果，我因为一个很傻比的错误，折腾了一晚上，还把项目删了重建。弄到最后，才发现，就是把server打成
了service.真的是好痛苦。以后，一些莫名奇妙的错误。第一个检查的一定要是拼写。
    再打一边，启动spring-boot项目的方法
        1:运行 XXXApplication
        2：maven 命令行   spring-boot:run
        3:jar的方式   maven  clean  package  然后 在目录中运行  Java -jar spring-boot01-1.0-SNAPSHOT.jar 启动（可以加参数修改port）
            (Java -jar spring-boot01-1.0-SNAPSHOT.jar --name="Spring" --server.port=9090   这么加,注意。真的是  -- 不是-)
    然后是 配置文件的格式
        1.  application.properties  格式： server.port=8888
        2.  application.yml  格式  server:  port: 8888  注意，key冒号和value之间一定要有空格
        其中，properties优先级比yml文件高。据说最高的是放在classpath:config/中的
----------------------------------------------------------------------------
2017年4月3日 10:34:59
    在配置文件中随便写一个属性，例如   xxx: ZhengXing
    可以在类中使用如下方式获取该属性:
        @Value("${xxx}")
        private String xxx;
    可以在配置文件中，获取已经配置好的属性，也就是多个配置属性的叠加
        cupSize: A
        age: 16
        girl: "cupSize: ${cupSize}, age: ${age}"
    这样就可以了。

    也可以直接将所有属性注入到一个实体类中（应该算是dto）
    yml这么写：
        girl:
          cupSize: A
          age: 16
    再创建一个实体类，加上这么个注释
        @Component
        @ConfigurationProperties(prefix = "girl")
    最后在要引入的类中这么写
        @Autowired
        private Girl girl;
    END。

    还可以同时配置两个yml文件，一个测试（application-dev），一个线上(application-app)。
    然后保留原来的application.yml(这个是总的),在里面配置
        spring:
            profiles:
                active: xxx(dev或app)
    就可以选择让哪个配置文件生效了。
    -以上Controller中的注解是RestController
    @RequestMapping(value = {"/","/index"}, method = RequestMethod.GET) 多个访问url
-------------------------------------------------------------
    spring有个模版 thymeleaf  使用html为后缀。 解析器默认路径  classpath:/templates/*.html  静态文件默认路径 classpath:/static/
    配置方式:
        1.导入jar
                 <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-thymeleaf</artifactId>
                </dependency>
        2.resources下建立目录  templates
            新建index.html
        3.使用普通的@Controller注解
            return "index";
    配置文件的一些可用配置（也可不配）
        #thymeleaf start
        spring.thymeleaf.mode=HTML5
        spring.thymeleaf.encoding=UTF-8
        spring.thymeleaf.content-type=text/html
        #开发时关闭缓存,不然没法看到实时页面
        spring.thymeleaf.cache=false
        #thymeleaf end
    妈的：这个模版又可以弄个项目学习下了。
-----------------------------------------------------------------
    spring-data-jpa  对hibernate的整合的框架（亏我之前还以为是一个新的简化的框架,..不过这么理解好像没错）
    restful :
    get   /girls  获取列表
    POST  /girls  创建
    get   /girls/id  查询
    put   /girls/id  更新
    delete /girls/id  删除

    配置文件配置 data-jpa
        spring:
          datasource:
            driver-class-name: com.mysql.jdbc.Driver
            url: jdbc:mysql://127.0.0.1:3306/test
            username: zx
            password: 123456
          jpa:
            hibernate:
              ddl-auto: update
            show-sql: true

    实体类：
        @Entity
        public class Girl {
            @Id
            @GeneratedValue
            private Integer id;
            private String cupSize;
            private Integer age;
        }
-----------------------------------------------------------------------
    dao层
        public interface GirlRepository extends JpaRepository<Girl,Integer> {
        }
    就这样就好了。不需要写接口的方法了
    controller中
            /**
             * 修改
             */
            @PutMapping("/{id}")
            public Girl updateGirl(@PathVariable("id")Integer id,@RequestParam("cupSize") String cupSize,@RequestParam("age")Integer age){
                Girl girl = new Girl();
                girl.setCupSize(cupSize);
                girl.setAge(age);
                girl.setId(id);
                return  girlRepository.save(girl);
            }
     ok了。强大
    还有。idea太强大了。网上看了一个 idea 设置的教程，有许多很好的设置，
    另外，tools-->test restful webservice
    可以进行 post、put等各种请求。
-----------------------------------------------------------------------
    Spring Boot 目前还无法直接注入的静态变量。我目前使用的方法是专门建立一个读取配置文件的Bean，然后使用 @PostConstruct 注解修饰的方法对这些静态属性进行初始化，例如：

    @Configuration
    public class ConstantsInitializer {

        @Value("${paging_size}")
        private String pagingSize;

        @PostConstruct
        public void initConstants() {
            Constants.PAGING_SIZE = this.pagingSize;
        }
    }
    yml注入常量
--------------------------------------------------------------------
    遇到一个bug，spring-boot的事务一直无法生效。
    明明说直接在方法上加一个@Transactional就可以了的。
    最后发现是因为data-jpa默认创建的表用的mysql引擎是myisam的，不支持事务，
    需要innodb才可以。现在正在找方法把默认引擎改成innodb,注意，还有一个sql_model的东西。
    依旧没有找到解决方法，但是手动修改后，事务是生效了。
--------------------------------------------------------------------------
    刚刚把idea里面的git弄好了。
    现在说下表单验证。
    在pojo中的属性中加注释
        @Min(value = 18,message = "未成年")
        private Integer age;
    然后在controller中的方法中这么写
            @PostMapping("")
                public Girl addGirl(@Valid Girl girl, BindingResult bindingResult){
                    if(bindingResult.hasErrors()){//如果有错误
                        System.out.printf(bindingResult.getFieldError().getDefaultMessage());
                        return null;
                    }
                    girl.setCupSize(girl.getCupSize());
                    girl.setAge(girl.getAge());
                    return girlRepository.save(girl);
                }
    就可以了。
    真6啊。这么写。表单验证的异常就可以直接返回了。
----------------------------------------------------------------------------------------
    spring-boot-aop
        @Aspect
        @Component
        public class HttpAspect {

            @Before("execution(public * com.zx.controller.GirlController.*(..))")
            public void log(){
                System.out.println("1111111");
            }
    或者
         //切点
            @Pointcut("execution(public * com.zx.controller.GirlController.*(..))")
            public void log(){

            }
            @Before("log()")
            public void doBefore(){
                System.out.println("1111111");
            }
            @After("log()")
            public void doAfter(){
                System.out.println("33333333333");
            }

     使用日志进行记录
         private final static Logger logger = LoggerFactory.getLogger(HttpAspect.class);
         @Before("log()")
             public void doBefore(JoinPoint joinPoint){
                 ServletRequestAttributes attributes = (ServletRequestAttributes)RequestContextHolder.getRequestAttributes();
                 HttpServletRequest request = attributes.getRequest();
                 //url
                 logger.info("url={}",request.getRequestURL());
                 //method
                 logger.info("method={}",request.getMethod());
                 //ip
                 logger.info("ip={}",request.getRemoteAddr());
                 //类方法
                 logger.info("class_method={}",joinPoint.getSignature().getDeclaringTypeName()+"."+joinPoint.getSignature().getName());
                 //参数
                 logger.info("args={}",joinPoint.getArgs());
             }
       记录返回的参数
        @AfterReturning(returning = "object",pointcut = "log()")
           public void doAfterReturning(Object object){
               logger.info("response={}",object.toString());
           }
    这么一个类。
---------------------------------------------------------------------------------------------
    1.@NotNull：不能为null，但可以为empty
    2.@NotEmpty：不能为null，而且长度必须大于0
    3.@NotBlank：只能作用在String上，不能为null，而且调用trim()后，长度必须大于0
    ("test")    即：必须有实际字符
   注解在实体类的属性上。
---------------------------------------------------------------------------------------------
    异常处理+统一返回类型
    1.自定义异常
        public class GirlException extends RuntimeException {
            private Integer code;
            public Integer getCode() {
                return code;
            }
            public void setCode(Integer code) {
                this.code = code;
            }
            public GirlException(ResultEnum resultEnum) {
                super(resultEnum.getMsg());
                this.code = resultEnum.getCode();
            }
        }
    2.定义异常枚举
        public enum ResultEnum {
            UNKONW_ERROR(-1,"未知错误"),
            SUCCESS(1,"成功"),
            PRIMARY_SCHOOL(2,"小学"),
            MIDDLE_SCHOOL(3,"初中");
            private Integer code;
            private String msg;
            ResultEnum(Integer code, String msg) {
                this.code = code;
                this.msg = msg;
            }
            public Integer getCode() {
                return code;
            }
            public String getMsg() {
                return msg;
            }
        }

    3.在service的方法中
        public void getAge(Integer id) throws Exception {
                Girl girl = girlRepository.findOne(id).get();
                Integer age  = girl.getAge();
                if(age < 10 ){
                    throw new GirlException(ResultEnum.PRIMARY_SCHOOL);
                }else if(age < 16){
                    throw new GirlException(ResultEnum.MIDDLE_SCHOOL);
                }
            }
        直接抛出自定义异常。并抛出所有异常。
    4.定义异常处理类(不会影响spring事务的回滚)
            @ControllerAdvice
            public class ExceptionHandle {
                private final static Logger logger = LoggerFactory.getLogger(ExceptionHandle.class);
                @ExceptionHandler(value = Exception.class)
                @ResponseBody
                public Result handle(Exception e){
                    //这样就可以区分系统异常和自己包装的异常了
                    if(e instanceof GirlException){
                        GirlException girlException = (GirlException) e;
                        return ResultUtil.error(girlException.getCode(),e.getMessage());
                    }else{
                        logger.error("【系统异常】{}",e);
                        return ResultUtil.error(ResultEnum.UNKONW_ERROR);
                    }
                }
            }
    5.定义controller层通用返回类
        public class Result<T> {
            /*错误码*/
            private Integer code;
            /*提示信息*/
            private String msg;
            /*数据*/
            private T data;}
    6.定义通用返回工具类
        public class ResultUtil {
            public static Result success(Object obj){
                Result result = new Result();
                result.setCode(0);
                result.setMsg("success");
                result.setData(obj);
                return result;
            }
            public static Result success(){
                return success(null);
            }
            public static Result error(Integer code,String msg){
                Result result = new Result();
                result.setCode(code);
                result.setMsg(msg);
                return result;
            }
            public static Result error(ResultEnum resultEnum){
                Result result = new Result();
                result.setCode(resultEnum.getCode());
                result.setMsg(resultEnum.getMsg());
                return result;
            }
        }
    7.controller返回
        return ResultUtil.success(girlResult);之类的

------------------------------------------------------------------------
  2017年4月13日 22:00:29
慕课网又出了一个spring data jpa的课程 ，学习一下
----------------------------------------------------------
    Repository<T,ID extends Serializable>接口 没有任何方法
        是一个空接口（标记接口），即没有方法声明的接口。但一旦继承这个接口，就可以进入spring的管理
        也可以不继承.使用如下注解：
            @RepositoryDefinition(domainClass = Student.class,idClass = Integer.class)
    Repository<T,ID extends Serializable>接口的子接口：
        CrudRepository:继承Repository,实现了crud的相关方法
            crudRepsitory的子接口：
                PagingAndSortingRepository接口： 分页和排序的实现接口
                    再往下的子接口：
                        JpaRepository:实现了上面所有的功能
---------------------------------------------------------------------------
    //名字以 x开头，年龄小于Y
    List<Student> findByNameStartingWithAndAgeLessThan(String name, Integer age);
    //名字 属于 xxx，或者年龄小雨y
    List<Student> findByNameInOrAgeLessThan(List<String> names,Integer age);
--------------------------------------------
    @Query
        //查询年龄最大的学生信息
        @Query("select s from Student s where id=(select max(id) from Student s1)")
        Student getStudentById();
        //查询1
        @Query("select s from Student s where s.name=?1 and age =?2")
        List<Student> queryStudent1(String name,Integer age);
        //查询2
        @Query("select s from Student s where s.name=:name and age =:age")
        List<Student> queryStudent2(@Param("name") String name,@Param("age")  Integer age);
        //查询3
        @Query("select s from Student s where s.name like %?1%")
        List<Student> queryStudent3(String name);
        //count  原生查询 注意 count 这种函数必须小写
        @Query(nativeQuery = true,value = "SELECT count(1) FROM student")
        long getCount();

    @Modifying 更新操作的注解 不知道为什么。没跟新成功，但是也没有报错
     @Modifying
        @Query("update Student set name=:name,age=:age where id=:id")
        void update(@Param("name")String name,@Param("age")Integer age,@Param("id")Integer id);
--------------------------------------------------------------------------
    分页
                // page 的索引从0开始
                Sort.Order order = new Sort.Order(Sort.Direction.DESC,"id");
                Sort sort = new Sort(order);
                Pageable pageable = new PageRequest(0,5,sort);
                Page<Student> page = studentRepository.findAll(pageable);
                System.out.println("总页数" + page.getTotalPages() );
                System.out.println("总记录数" + page.getTotalElements());
                System.out.println("当前页" + page.getNumber());
                System.out.println("当前页面的集合内容（list对象）" + page.getContent());
                System.out.println("当前页面的记录书" + page.getNumberOfElements());
-----------------------------------------
    JpaSpecificationExecutor<T>接口  Specification封装了Criteria查询条件  可以继承多个接口，功能增强

    //1.分页 2。排序 3.查询条件 ：age > 50
    //匿名内部类
    //root就是我们要查询的类型（Student） criteriaQuery:查询条件 criteria：构建predicate
    Specification<Student>  specification = new Specification<Student>() {
           @Override
    public Predicate toPredicate(Root<Student> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {
            //root (Student(age))
             Path path = root.get("age");
             return criteriaBuilder.gt(path,50);
           }
    };
         Sort.Order order = new Sort.Order(Sort.Direction.DESC,"id");
         Sort sort = new Sort(order);
         Pageable pageable = new PageRequest(0,5,sort);
         //可以同时传条件和分页
         final Page<Student> page = studentRepository.findAll(specification, pageable);
----------------------------------------------------
今晚9点回家，到现在（2017年4月13日 23:17:22）看完了这个data jpa，。我也是够拼的了。。睡觉
听说慕课网下面还有spark的课程。
-----------------------
2017年4月14日 14:08:25 直接把那个项目的总结，复制到这里好了。那些代码就删了把



